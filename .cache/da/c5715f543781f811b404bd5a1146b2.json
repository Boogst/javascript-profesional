{"id":"ejercicios/proxy.html","dependencies":[{"name":"/mnt/c/Users/villegasDev/platzi/Escuela de JS/Curso profesional de JS/javascript-profesional/package.json","includedInParent":true,"mtime":1580510549686}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>proxy</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go back</a>\n\n    <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\n    <script>// Proxy es parecido a getters y setters\n// Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\n// Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\n// Si la propiedad existe, la regresamos\n// Si no existe, entonces sugerimos una que pueda funcionar\n// Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\n// Ejemplos de levenshtein distance (usa window.Levenshtein)\nconst target = {\n  red: 'Rojo',\n  green: 'Verde',\n  blue: 'Azul'\n}; //Si nos equivocamos buscando algunas de estas propiedades se nos ayude\n//Para eso creamos un objeto handler\n\nconst handler = {\n  get(obj, prop) {\n    if (prop in obj) {\n      return obj[prop];\n    }\n\n    const suggestion = Object.keys(obj).find(key => Levenshtein.get(key, prop) <= 3);\n\n    if (suggestion) {\n      console.log(`${prop} no se encontro. Quisiste decir ${suggestion} ?`);\n    }\n\n    return obj[prop];\n  }\n\n};\nconst p = new Proxy(target, handler);</script>\n\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"2f38023f8cb0bb9fd9cb9afef3841784","cacheData":{"env":{}}}