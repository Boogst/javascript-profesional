{"id":"ejercicios/prototype.html","dependencies":[{"name":"/mnt/c/Users/villegasDev/platzi/Escuela de JS/Curso profesional de JS/javascript-profesional/package.json","includedInParent":true,"mtime":1582595203998}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Scope</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go back</a>\n\n    <script>// Un objeto común y corriente\n// const zelda = {\n//     name: 'Zelda'\n// }\n// zelda.saludar = function(){\n//     console.log(`Hola soy ${this.name}`)\n// }\n// zelda.saludar();\n// const link = {\n//     name: 'Link'\n// }\n// link.saludar = function(){\n//     console.log(`Hola soy ${this.name}`)\n// }\n// link.saludar();\n//Seamos un poco más eficientes\n// function Hero(name){\n//     const hero = {\n//         name\n//     }\n//     hero.saludar = function(){\n//         console.log(`Hola soy ${this.name}`)\n//     }\n//     return hero\n// }\n// const zelda = Hero('zelda')\n// zelda.saludar();\n// const link = Hero('Link')\n// link.saludar();\n//Aun podemos mejorar mas y evitar que crear la misma funcion cada vez\n// const heroMethods = {\n//     saludar: function(){\n//         console.log(`Me llamo ${this.name}`)\n//     }\n// }\n// function Hero(name){\n//     const hero = {\n//         name\n//     }\n//     hero.saludar = heroMethods.saludar;\n//     return hero\n// }\n// const zelda = Hero('zelda')\n// zelda.saludar();\n// const link = Hero('Link')\n// link.saludar();\n// Object.create\n//--- const nuevoObjeto = Object.create(objeto);\n// const heroMethods = {\n//     saludar: function(){\n//         console.log(`Soy superHeroe ${this.name}`)\n//     }\n// }\n// function Hero(name){\n//     const hero = Object.create(heroMethods);\n//     hero.name = name;\n//     return hero\n// }\n// const zelda = Hero('zelda')\n// zelda.saludar();\n// const link = Hero('Link')\n// link.saludar();\n//Los metodos de hero dentro de Hero\n// const heroMethods = {\n//     saludar: function(){\n//         console.log(`Soy superHeroe ${this.name}`)\n//     }\n// }\n// function Hero(name){\n//     const hero = Object.create(Hero.prototype);\n//     hero.name = name;\n//     return hero\n// }\n// Hero.prototype.saludar = function(){\n//     console.log(`Soy superheroina! ${this.name}`)\n//  }\n// const zelda = Hero('zelda')\n// zelda.saludar();\n// const link = Hero('Link')\n// link.saludar();\n//new es un atajo(azucar sintactica) para llevar Hero.prototype al objeto\nfunction Hero(name) {\n  console.log(Hero.prototype);\n  const hero = Object.create(Hero.prototype);\n  console.log(hero);\n  console.log('----------------------');\n  hero.name = name;\n  console.log(hero);\n  return hero;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`New: ${this.name}`);\n};\n\nconst zelda = Hero('zelda');\nzelda.saludar();\nconst link = Hero('Link');\nlink.saludar();</script>\n\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"591ace5b55752abb98cb749b20a57ae9","cacheData":{"env":{}}}