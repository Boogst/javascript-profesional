{"id":"ejercicios/scope.html","dependencies":[{"name":"/mnt/c/Users/villegasDev/platzi/Escuela de JS/Curso profesional de JS/javascript-profesional/package.json","includedInParent":true,"mtime":1582595203998}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Scope</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go back</a>\n\n    <script>//Global scope\n//var message = 'Hello, Platzi!'; //Toda funcion que declaremos fuera de una funcion de un bloque, tendr√° el scope global.\n//Function Scope - algo parecido a los clousure\n// function printNumber(){\n//     var i;\n//     for(i = 0; i < 10; i++){\n//         function eventuallyPrintNumber(n){ //Cuando le pasamos algun valor en \"n\" en cada instancia o ejecucion de \n//                                             //la funcion(cuando le pasamos i), estamos entrando en un scope nuevo, y en este scope se va a recordar el valor que tenia \"n\" en ese momento que se ejecuto la funcion\n//             setTimeout(() => {\n//                 console.log(n)\n//             }, 100);\n//         }\n//         eventuallyPrintNumber(i);\n//     }\n// }\n// printNumber();\n//Block Scope let - const\nfunction printNumber() {\n  for (let i = 0; i < 10; i++) {\n    setTimeout(() => {\n      console.log(i);\n    }, 100);\n  }\n}\n\nprintNumber(); //Module Scope Limita el alcance, no salen del archivo, es decir el codigo solo vive en ese archivo</script>\n\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"9d2fb85c79bb0a0d9cf5b140ba196702","cacheData":{"env":{}}}