{"id":"ejercicios/generadores.html","dependencies":[{"name":"/mnt/c/Users/villegasDev/platzi/Escuela de JS/Curso profesional de JS/javascript-profesional/package.json","includedInParent":true,"mtime":1582595203998}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Generadores</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <script>//Los generadores son funciones de las que se puede salir y volver a entrar.\n//  \n// Cada vez que llamamos next, la ejecución del generador va a continuar hasta el proximo yield\nfunction* simpleGenerator() {\n  console.log('GENERETOR START');\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log('GENERETOR END');\n} // Los generadores no son ejetutables de por si, tenemos que llamarla\n// Al llamarla nos va a crear una nueva funcion, que entonces si podemos ejecutar. \n//const gen = simpleGenerator() //Para ejecutar ese generador debemos usar gen.next()\n//gen.next() //me va a devolver un objeto con un valor y un bool que indica si se termino o no\n//Podemos hacer generadores infinitos\n\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id++;\n  }\n} //  Quizas queremos devolver la id con el valor de 1\n// Para hacer eso, debemos pasar un parametro a next\n// Cuando llamamos next tambien podemos pasar valores que la funcion recibe\n\n\nfunction* idMakerWithReset() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id; //le pasaremos un booleano\n\n    if (reset) {\n      id = 1;\n    } else {\n      id++;\n    }\n  }\n}\n\nconst g = idMakerWithReset();\nconsole.log(g.next());\nconsole.log(g.next());\nconsole.log(g.next());\nconsole.log(g.next(true)); //Ahora hagamos un ejemplo un poco más complejo: la secuencia d fibonacci\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n\n  while (true) {\n    // los generadores: Siempre recordandose del scope donde estaba \n    yield a;\n    let temp = a;\n    a = b;\n    b = temp + b;\n  }\n}</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"5286588d671744ec60048598139f68f9","cacheData":{"env":{}}}